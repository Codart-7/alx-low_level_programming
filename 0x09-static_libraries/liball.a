!<arch>
0-isupper.c/    0           0     0     644     228       `
#include "main.h"
/**
* _isupper - function that checks for uppercase characters
* @c: int type number
* Return: 1 if uppercase, else 0
*/
int _isupper(int c)
{
	if ((c >= 'A') && (c <= 'Z'))

	return (1);
	else

	return (0);
}
0-memset.c/     0           0     0     644     294       `
#include "main.h"
/**
 * _memset - fills memory with a constant byte,
 * @s: memory area.
 * @b: constant byte.
 * @n: bytes filled.
 * Return: the pointer to dest.
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		*(s + i) =  b;

	return (s);
}
0-strcat.c/     0           0     0     644     381       `
#include "main.h"
/**
 * *_strcat - main
 * @dest: string to be appended
 * @src: the new string
 * Return: new appended string
 */
char *_strcat(char *dest, char *src)
{
	int i, c;

	c = 0;
	for (i = 0; i < 10000; i++)
	{
		if (dest[i] == '\0')
			break;
		c++;
	}

	for (i = 0; src[i] != '\0' && i < c; i++)
	{
		dest[c + i] = src[i];
	}

	dest[c + i] = '\0';

	return (dest);
}

1-isdigit.c/    0           0     0     644     190       `
#include "main.h"
/**
*_isdigit - Check for digits (0 through 9)
*@c: int type param
*Return: 1 if digit, else 0
*/
int _isdigit(int c)
{
	if (c > 47 && c < 58)
	return (1);

	return (0);
}
1-memcpy.c/     0           0     0     644     322       `
#include "main.h"
/**
 * _memcpy - copies memory area,
 * @dest: destination memory area.
 * @src: source memory area.
 * @n: bytes filled.
 * Return: the pointer to dest.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		*(dest + i) =  *(src + i);

	return (dest);
}
1-strncat.c/    0           0     0     644     424       `
#include "main.h"

/**
 * _strncat - two words
 * @dest : pointer to char param
 * @src : pointer to char param
 * @n : int parameter
 * Return: *dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int m;
	int i;

	m = 0;

	for (i = 0; i < 1000; i++)
	{
		if (dest[i] == '\0')
		{
			break;
		}
		m++;
	}

	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		dest[m + i] = src[i];
	}
	dest[m + i] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     384       `
#include "main.h"
/**
 * _atoi - int
 * @s: pointer
 * Return: int.
 */
int _atoi(char *s)
{
	int i;
	int res = 0;
	int sig = -1;
	int brk = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
			sig = sig * -1;
		if (s[i] >= '0' && s[i] <= '9')
		{
			res = res * 10;
			res -= (s[i] - '0');
			brk = 1;
		}
		else if (brk == 1)
			break;
	}
	res = sig * res;
	return (res);
}
2-strchr.c/     0           0     0     644     354       `
#include "main.h"
/**
 * _strchr - locates a character in a string,
 * @s: string.
 * @c: character.
 * Return: the pointer to the first occurrence of the character c.
 */
char *_strchr(char *s, char c)
{
	unsigned int i = 0;

	for (; *(s + i) != '\0'; i++)
		if (*(s + i) == c)
			return (s + i);
	if (*(s + i) == c)
		return (s + i);
	return ('\0');
}
2-strlen.c/     0           0     0     644     203       `
#include "main.h"
/**
 * _strlen - main
 * @s: the array to count
 * Return: the length
 */
int _strlen(char *s)
{
	int n, i;

	n = 0;
	for (i = 0; s[i]; i++)
		if (s[i] != '\0')
			n++;

	return (n);
}

2-strncpy.c/    0           0     0     644     344       `
#include "main.h"

/**
 * _strncpy - two words
 * @dest : pointer to char params
 * @src : pointer to char params
 * @n : int params
 * Return: *dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		dest[i] = src[i];
	}

	for ( ; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}
3-islower.c/    0           0     0     644     224       `
#include "main.h"

/**
 * _islower - prints 1 or 0 depending on input
 * @c: first parameter
 *
 * Description: prints all lowercase letters
 * Return: Always(0).
 */

int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}
3-puts.c/       0           0     0     644     163       `
#include "main.h"
/**
 * _puts - main
 * @str: to be printed
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     297       `
#include "main.h"

/**
 * _strcmp - compare
 * @s1 : pointerto char params
 * @s2 : pointer to char params
 * Return: *dest
 */

int _strcmp(char *s1, char *s2)
{
	int i;
	int R;

	i = 0;

	while (s1[i] == s2[i] && (s1[i] != '\0' || s2[i] != '\0'))
	{
		i++;
	}
	R = s1[i] - s2[i];
	return (R);
}

3-strspn.c/     0           0     0     644     460       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring.
 * @s: initial segment.
 * @accept: accepted bytes.
 * Return: the number of accepted bytes.
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j, bool;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		bool = 1;
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
			{
				bool = 0;
				break;
			}
		}
		if (bool == 1)
			break;
	}
	return (i);
}
4-isalpha.c/    0           0     0     644     281       `
#include "main.h"
/**
*_isalpha - Check if character is a alphabet character.
*@c: type int character
*Return: 1 if letter, lowercase or uppercase, and 0 otherwise
*/
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);

	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     475       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: first string.
 * @accept: second string.
 * Return: a pointer to the byte in s that matches one of the
 * bytes in accept, or NULL if no such byte is found.
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; *(s + i) != '\0'; i++)
	{
		for (j = 0; *(accept + j) != '\0'; j++)
		{
			if (*(s + i) == *(accept + j))
				return (s + i);
		}
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     620       `
#include "main.h"
/**
 * _strstr - finds the first occurrence of the substring.
 * needle in the string haystack.
 * @haystack: entire string.
 * @needle: substring.
 * Return: pointer to the beginning of located substring or
 * NULL if the substring is not found.
*/
char *_strstr(char *haystack, char *needle)
{
	char *bhaystack;
	char *pneedle;

	while (*haystack != '\0')
	{
		bhaystack = haystack;
		pneedle = needle;

		while (*haystack != '\0' && *pneedle != '\0' && *haystack == *pneedle)
		{
			haystack++;
			pneedle++;
		}
		if (!*pneedle)
			return (bhaystack);
		haystack = bhaystack + 1;
	}
	return (0);
}
6-abs.c/        0           0     0     644     208       `
#include "main.h"
/**
*_abs - compute the absolute value of an integer
*@n: int type number
*Return: absolute value of @n
*/
int _abs(int n)
{
	if (n < 0)
	{
		return (n * -1);
	}
	else
	{
		return (n);
	}
}
9-strcpy.c/     0           0     0     644     271       `
#include "main.h"

/**
 * *_strcpy - copy strg to another string
 * @dest: pointer
 * @src: poiter
 * Return: numbers dest
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}

